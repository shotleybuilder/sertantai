defmodule Sertantai.Repo.Migrations.AddAiTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:ai_response_processings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :session_id, :uuid, null: false
      add :user_response, :text, null: false
      add :extracted_data, :map, default: %{}
      add :confidence_scores, :map, default: %{}
      add :validation_status, :text, default: "pending"
      add :processing_metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:ai_question_generations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :organization_id,
          references(:organizations,
            column: :id,
            name: "ai_question_generations_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :conversation_session_id, :uuid
      add :question_type, :text, default: "gap_filling"
      add :generated_questions, {:array, :map}, default: []
      add :priority_score, :decimal
      add :context_data, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :analysis_id, :uuid
    end

    create table(:ai_organization_analyses, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :organization_id,
          references(:organizations,
            column: :id,
            name: "ai_organization_analyses_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :conversation_session_id, :uuid
      add :analysis_type, :text, default: "gap_analysis"
      add :gap_analysis_result, :map
      add :confidence_score, :decimal
      add :recommendations, {:array, :text}, default: []

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:ai_conversation_sessions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:ai_response_processings) do
      modify :session_id,
             references(:ai_conversation_sessions,
               column: :id,
               name: "ai_response_processings_session_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:ai_question_generations) do
      modify :conversation_session_id,
             references(:ai_conversation_sessions,
               column: :id,
               name: "ai_question_generations_conversation_session_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :analysis_id,
             references(:ai_organization_analyses,
               column: :id,
               name: "ai_question_generations_analysis_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:ai_organization_analyses) do
      modify :conversation_session_id,
             references(:ai_conversation_sessions,
               column: :id,
               name: "ai_organization_analyses_conversation_session_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:ai_conversation_sessions) do
      add :organization_id,
          references(:organizations,
            column: :id,
            name: "ai_conversation_sessions_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "ai_conversation_sessions_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :session_status, :text, default: "active"
      add :conversation_history, {:array, :map}, default: []
      add :discovered_attributes, :map, default: %{}
      add :current_context, :map, default: %{}
      add :completion_percentage, :decimal, default: "0.0"
      add :session_metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    drop constraint(:ai_conversation_sessions, "ai_conversation_sessions_organization_id_fkey")

    drop constraint(:ai_conversation_sessions, "ai_conversation_sessions_user_id_fkey")

    alter table(:ai_conversation_sessions) do
      remove :updated_at
      remove :inserted_at
      remove :session_metadata
      remove :completion_percentage
      remove :current_context
      remove :discovered_attributes
      remove :conversation_history
      remove :session_status
      remove :user_id
      remove :organization_id
    end

    drop constraint(
           :ai_organization_analyses,
           "ai_organization_analyses_conversation_session_id_fkey"
         )

    alter table(:ai_organization_analyses) do
      modify :conversation_session_id, :uuid
    end

    drop constraint(
           :ai_question_generations,
           "ai_question_generations_conversation_session_id_fkey"
         )

    drop constraint(:ai_question_generations, "ai_question_generations_analysis_id_fkey")

    alter table(:ai_question_generations) do
      modify :analysis_id, :uuid
      modify :conversation_session_id, :uuid
    end

    drop constraint(:ai_response_processings, "ai_response_processings_session_id_fkey")

    alter table(:ai_response_processings) do
      modify :session_id, :uuid
    end

    drop table(:ai_conversation_sessions)

    drop constraint(:ai_organization_analyses, "ai_organization_analyses_organization_id_fkey")

    drop table(:ai_organization_analyses)

    drop constraint(:ai_question_generations, "ai_question_generations_organization_id_fkey")

    drop table(:ai_question_generations)

    drop table(:ai_response_processings)
  end
end
