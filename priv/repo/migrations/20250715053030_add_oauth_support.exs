defmodule Sertantai.Repo.Migrations.AddOauthSupport do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      modify :hashed_password, :text, null: true
      add :primary_provider, :text, default: "password"
      add :connected_providers, {:array, :text}, default: []
      add :profile_image_url, :text
      add :company, :text
      add :job_title, :text
      add :github_username, :text
      add :linkedin_url, :text
      add :verified_email, :boolean, default: false
      add :enterprise_domain, :text
      add :okta_groups, {:array, :text}, default: []
      add :azure_tenant_id, :text
      add :airtable_connected, :boolean, default: false
      add :airtable_workspace_id, :text
    end

    create table(:user_identities, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :provider, :text, null: false
      add :uid, :text, null: false
      add :access_token, :text
      add :refresh_token, :text
      add :expires_at, :utc_datetime
      add :token_type, :text, default: "Bearer"
      add :provider_data, :map, default: %{}
      add :active, :boolean, default: true
      add :last_sign_in_at, :utc_datetime
      add :sign_in_count, :bigint, default: 0

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "user_identities_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:user_identities, [:provider, :uid],
             name: "user_identities_unique_provider_uid_index"
           )

    create unique_index(:user_identities, [:user_id, :provider],
             name: "user_identities_unique_user_provider_index"
           )
  end

  def down do
    drop_if_exists unique_index(:user_identities, [:user_id, :provider],
                     name: "user_identities_unique_user_provider_index"
                   )

    drop_if_exists unique_index(:user_identities, [:provider, :uid],
                     name: "user_identities_unique_provider_uid_index"
                   )

    drop constraint(:user_identities, "user_identities_user_id_fkey")

    drop table(:user_identities)

    alter table(:users) do
      remove :airtable_workspace_id
      remove :airtable_connected
      remove :azure_tenant_id
      remove :okta_groups
      remove :enterprise_domain
      remove :verified_email
      remove :linkedin_url
      remove :github_username
      remove :job_title
      remove :company
      remove :profile_image_url
      remove :connected_providers
      remove :primary_provider
      modify :hashed_password, :text, null: false
    end
  end
end
