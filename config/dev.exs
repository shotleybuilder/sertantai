import Config

# Configure your database
# Support both local PostgreSQL and Supabase based on environment variable
database_config = if System.get_env("USE_LOCAL_DB") == "true" do
  [
    username: System.get_env("DB_USERNAME") || "postgres",
    password: System.get_env("DB_PASSWORD") || "postgres",
    hostname: System.get_env("DB_HOSTNAME") || "localhost",
    database: System.get_env("DB_NAME") || "sertantai_dev",
    port: String.to_integer(System.get_env("DB_PORT") || "5432"),
    stacktrace: true,
    show_sensitive_data_on_connection_error: true,
    pool_size: 10
  ]
else
  # Use Supabase connection pooler for IPv4 connectivity
  [
    username: "postgres.laqakhlqqmakacqgwrnh",  # postgres.{project-ref}
    password: System.get_env("SUPABASE_PASSWORD"),
    hostname: "aws-0-eu-west-2.pooler.supabase.com",  # Pooler hostname
    database: System.get_env("SUPABASE_DATABASE") || "postgres",
    port: 6543,  # Connection pooling port
    parameters: [pgbouncer: "true"],  # Required for pgbouncer
    ssl: true,
    ssl_opts: [verify: :verify_none],
    stacktrace: true,
    show_sensitive_data_on_connection_error: true,
    pool_size: 10
  ]
end

config :sertantai, Sertantai.Repo, database_config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :sertantai, SertantaiWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "WduvM2jaEce7yOTLUJ2oa9oVf2KdBUjJ8IjxLYZ+FD0kgMifR0PBTNVsYHPDnZjf",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:sertantai, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:sertantai, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :sertantai, SertantaiWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/sertantai_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :sertantai, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false
