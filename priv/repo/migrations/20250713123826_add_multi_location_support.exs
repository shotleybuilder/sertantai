defmodule Sertantai.Repo.Migrations.AddMultiLocationSupport do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # Create new multi-location tables only
    # Note: organizations and organization_users tables already exist

    create table(:organization_locations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :location_name, :text, null: false
      add :location_type, :text, default: "branch_office"
      add :address, :map, null: false
      add :geographic_region, :text, null: false
      add :postcode, :text
      add :local_authority, :text
      add :operational_profile, :map, default: %{}
      add :employee_count, :bigint
      add :annual_revenue, :decimal
      add :operational_status, :text, default: "active"
      add :industry_activities, {:array, :text}, default: []
      add :environmental_factors, :map, default: %{}
      add :health_safety_profile, :map, default: %{}
      add :data_processing_activities, {:array, :text}, default: []
      add :is_primary_location, :boolean, default: false
      add :established_date, :date
      add :compliance_notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :organization_id,
          references(:organizations,
            column: :id,
            name: "organization_locations_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:location_screenings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :screening_type, :text, default: "progressive"
      add :screening_status, :text, default: "in_progress"
      add :applicable_law_count, :bigint, default: 0
      add :high_priority_count, :bigint, default: 0
      add :screening_results, :map, default: %{}
      add :compliance_recommendations, {:array, :map}, default: []
      add :started_at, :utc_datetime
      add :completed_at, :utc_datetime
      add :last_activity_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :organization_location_id,
          references(:organization_locations,
            column: :id,
            name: "location_screenings_organization_location_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :conducted_by_user_id,
          references(:users,
            column: :id,
            name: "location_screenings_conducted_by_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    # Note: ai_conversation_sessions columns already exist
  end

  def down do
    # Note: ai_conversation_sessions columns already exist, not removing

    drop constraint(:location_screenings, "location_screenings_organization_location_id_fkey")

    drop constraint(:location_screenings, "location_screenings_conducted_by_user_id_fkey")

    drop table(:location_screenings)

    drop constraint(:organization_locations, "organization_locations_organization_id_fkey")

    drop table(:organization_locations)

    # Note: Not dropping organizations or organization_users tables as they already exist

  end
end
