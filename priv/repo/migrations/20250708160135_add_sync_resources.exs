defmodule Sertantai.Repo.Migrations.AddSyncResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sync_configurations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :provider, :text
      add :is_active, :boolean, default: true
      add :encrypted_credentials, :text
      add :credentials_iv, :text
      add :sync_frequency, :text, default: "manual"
      add :last_synced_at, :utc_datetime
      add :sync_status, :text, default: "pending"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "sync_configurations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:selected_records, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :external_record_id, :text, null: false
      add :record_type, :text, null: false
      add :sync_status, :text, default: "pending"
      add :last_synced_at, :utc_datetime
      add :sync_error, :text
      add :cached_data, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "selected_records_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :sync_configuration_id,
          references(:sync_configurations,
            column: :id,
            name: "selected_records_sync_configuration_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:selected_records, [:sync_configuration_id, :external_record_id],
             name: "selected_records_unique_record_per_config_index"
           )
  end

  def down do
    drop_if_exists unique_index(:selected_records, [:sync_configuration_id, :external_record_id],
                     name: "selected_records_unique_record_per_config_index"
                   )

    drop constraint(:selected_records, "selected_records_user_id_fkey")

    drop constraint(:selected_records, "selected_records_sync_configuration_id_fkey")

    drop table(:selected_records)

    drop constraint(:sync_configurations, "sync_configurations_user_id_fkey")

    drop table(:sync_configurations)
  end
end
